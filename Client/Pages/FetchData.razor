@page "/fetchdata"
@using TreasuryExpress.Shared
@inject HttpClient Http


@if (forecasts != null)
{
    <span>
        @forecasts.Count();
    </span>
}

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn bnt-danger" @onclick="(()=>tryDelete(forecast.id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        Console.Write(forecasts);
    }

    private void tryDelete(int id)
    {
        List<WeatherForecast> forecastList = forecasts.ToList().Where(x=>x.id!=id).ToList();
        forecasts = forecastList.ToArray();

    }

}
